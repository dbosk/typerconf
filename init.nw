\chapter{The [[cli.config]] module and subcommands}

In this chapter, we document the [[config]] command of [[nytid]].
This is located in the [[nytid.cli.config]] module.

We want the configuration to be stored in a JSON structure.
\label{ConfigStructure}
\begin{minted}{JSON}
{
  "courses": {
    "datintro22": {
      "timesheet": {
        "url": "https://sheets.google.com/..."
      },
      "schedule": {
        "url": "https://timeedit.net/..."
      }
    }
  }
}
\end{minted}
Then we can access values by dot-separated addresses.
For instance, we can use [[courses.datintro22.schedule.url]] to access the 
TimeEdit URL of the datintro22 course.
(We'll use the class provided in \cref{ConfigClass} for this.)


\section{Code outline}

We use the structure outlined in \cref{CLIoverview}.
<<init.py>>=
"""The nytid config command"""

import appdirs
import json
import logging
import os
import typer
import typing

dirs = appdirs.AppDirs("nytid", "dbosk@kth.se")
cli = typer.Typer()

<<classes>>
<<helper functions>>

<<config subcommands>>

if __name__ == "__main__":
  cli()
@

We also add tests.
These are all prepended [[test_]] to the function name.
We will run them using [[pytest]].
<<test cliconfig.py>>=
from nytid.cli.config import *

<<test functions>>
@


\section{Accessing the configuration: the [[get]] and [[set]] functions}

We will provide two functions [[get]] and [[set]] that modifies the config, 
immediately syncing to the file system.
<<helper functions>>=
def get(path: str = "") -> typing.Any:
  """
  Returns the value stored at `path` in the config.

  By default, `path = ""`, which returns the entire configuration as a Config 
  object.
  """
  <<read config from file>>
  <<return the value at path in config>>

def set(path: str, values: typing.List[typing.Any]):
  """
  Sets `value` at `path` in the config. `value` will be interpreted as JSON, if 
  conversion to JSON fails, it will be used as is.
  """
  <<read config from file>>
  <<set the value at path in config>>
  <<write config back to file>>
@

Let's start with reading the config file.
<<read config from file>>=
conf = read_config()
@ Whereas writing the file is the corresponding call.
<<write config back to file>>=
write_config(conf)
@ We'll see these functions in \cref{ConfigFile}.

Now that we have the config structure in [[conf]] we can use it.
Let's start with getting a value.
<<return the value at path in config>>=
return conf.get(path)
@

Now, to set a value, we have several cases.
If the use supplied more than one value, we want a list.
If only one value, we don't want to store a list with only one value in it.
Also, we want to try interpret any value as JSON.
If that fails, we'll use the value as-is.
<<set the value at path in config>>=
for i in range(len(values)):
  try:
    values[i] = json.loads(values[i])
  except json.decoder.JSONDecodeError:
    pass

if len(values) == 1:
  values = values[0]

conf.set(path, values)
@

Now let's cover [[read_config]], [[write_config]], [[set_path]] and 
[[get_path]] below.


\section{Reading and writing the config file}\label{ConfigFile}

The configuration file is stored in a suitable system location.
For this we use the AppDirs package, we have the [[dirs]] instance above.
We want to read the config and return a JSON structure as outlined above 
(\cref{ConfigStructure}).
And conversely, write one to the config file as well.
<<helper functions>>=
def read_config(conf_path=f"{dirs.user_config_dir}/config.json"):
  """
  Returns the config data structure (JSON).
  `conf_path` is an optional argument providing the path to the config file.
  """
  try:
    with open(conf_path) as conf_file:
      return Config(json.load(conf_file))
  except FileNotFoundError:
    logging.warning(f"Config file {conf_path} could not be found.")
  except json.decoder.JSONDecodeError as err:
    logging.warning(f"Config file {conf_path} could not be decoded: {err}")

  return Config()

def write_config(conf,
                 conf_path=f"{dirs.user_config_dir}/config.json"):
  """
  Stores the config data `conf` (extracts JSON) in the config file.
  `conf_path` is an optional argument providing the path to the config file.
  """
  conf_dir = os.path.dirname(conf_path)
  if not os.path.isdir(conf_dir):
    os.mkdir(conf_dir)

  with open(conf_path, "w") as conf_file:
    json.dump(conf.get(), conf_file)
@


\section{Navigating config structures}\label{ConfigClass}

We provide the class [[Config]] to navigate the config structure.
This class has two methods that are central:
The first gets a value out, the other sets a value in.
Both work with these dot-separated addresses.
<<classes>>=
class Config:
  """Navigates nested JSON structures by dot-separated addressing."""

  def __init__(self, json_data={}):
    """
    Constructs a config object to navigate from JSON data `json_data`.
    """
    self.__data = json_data

  def get(self, path: str = "") -> typing.Any:
    """
    Returns object at `path`.
    Example:
    - `path = "courses.datintro22.url"` and
    - Config contains `{"courses": {"datintro22": {"url": "https://..."}}}` 
      will return "https://...".

    Any part of the path that can be converted to an integer, will be converted 
    to an integer. This way we can access elements of lists too.
    """
    <<get value at path>>

  def set(self, path: str, value: typing.Any):
    """
    Sets `value` at `path`. Any parts along the path that don't exist will be 
    created.

    Example:
    - `value = "https://..."`,
    - `path = "courses.datintro22.url"`
    will create `{"courses": {"datintro22": {"url": "https://..."}}}`.

    Any part of the path that can be converted to an integer, will be converted 
    to an integer. This way we can access elements of lists too. However, we 
    cannot create index 3 in a list if it doesn't exist.
    """
    <<set value at path>>

  def paths(self, from_root=""):
    """
    Returns all existing paths.

    The optional argument `from_root` is a path and the method return all 
    subpaths rooted at that point.
    """
    <<return list of all paths>>
@

We test these methods with the examples from the docstrings.
<<test functions>>=
conf = Config({
  "courses": {
    "datintro22": {
      "url": "https://...",
      "TAs": ["Asse", "Assa"]
    }
  }
})

def test_get_path():
  assert conf.get("courses.datintro22.url") == "https://..."
  assert conf.get("courses.datintro22.TAs.0") == "Asse"

def test_set_path():
  value = "Asselina"
  path = "courses.datintro22.TAs.0"
  conf.set(path, value)
  assert conf.get(path) == value

  value = ["Asse", "Assa", "Asselina"]
  path = "courses.prgx22.TAs"
  conf.set(path, value)
  assert len(conf.get(path)) == len(value)

def test_paths():
  assert "courses.datintro22.TAs" in conf.paths()
  for path in conf.paths():
    assert conf.get(path)
@

\subsection{Getting values}

To get the value, we simply walk along the path and returns what remains.
<<get value at path>>=
structure = self.__data

if not path:
  return structure

for part in path.split("."):
  try:
    part = int(part)
  except ValueError:
    pass

  try:
    structure = structure[part]
  except KeyError:
    raise KeyError(f"{part} along {path} doesn't exist")

return structure
@

\subsection{Setting values}

To set a value is a bit more complex.
We want to be able to specify a path and create all parents along the path if 
they don't exist.
<<set value at path>>=
structure = self.__data

parts = path.split(".")
for part in parts[:-1]:
  try:
    part = int(part)
  except ValueError:
    pass

  try:
    structure = structure[part]
  except KeyError:
    structure[part] = {}
    structure = structure[part]

part = parts[-1]
try:
  part = int(part)
except ValueError:
  pass
structure[part] = value
@

\subsection{All existing paths}

Lastly, what we want to do is to create a list containing all paths in the 
config.
We will simply traverse the config tree and add paths as we go.
We need to treat dictionaries and lists differently.
And anything else is a leaf.
<<return list of all paths>>=
paths = []
root = self.get(from_root)

if isinstance(root, dict):
  for part in root:
    if from_root:
      path = f"{from_root}.{part}"
    else:
      path = part

    paths.append(path)
    paths += self.paths(from_root=path)
elif isinstance(root, list):
  paths += [f"{from_root}.{x}" for x in range(len(root))]

return paths
@


\section{The [[get]] and [[set]] subcommands}

We will provide two subcommands for the [[get]] and [[set]] functions 
above.
We simply wrap a function around them that prints the results.
<<config subcommands>>=
path_arg = typer.Argument(...,
                          help="Path in config, e.g. 'courses.datintro22'. "
                               "Empty string is root of config.",
                          autocompletion=complete_path)
value_arg = typer.Argument(...,
                           help="Values to store. "
                                "More than one value makes a list. "
                                "Values are treated as JSON if possible.")

@cli.command(name="get")
def cli_get(path: str = path_arg):
  """
  Prints the config to stdout.
  """
  print_config(get(path), path)

@cli.command(name="set")
def cli_set(path: str = path_arg, values: typing.List[str] = value_arg):
  """
  Sets values in config.
  """
  set(path, values)
@

\subsection{Autocompleting the path}

The [[complete_path]] functions returns the possible completions for an 
incomplete path from the command line.
<<helper functions>>=
def complete_path(initial_path: str):
  """
  Returns all valid paths in the config starting with `initial_path`.
  """
  return list(filter(lambda x: x.startswith(initial_path),
                     Config(get()).paths()))
@

We test this function as follows.
<<test functions>>=
def test_complete_path():
  conf = Config({
    "courses": {
      "datintro22": {
        "url": "https://...",
        "TAs": ["Asse", "Assa"]
      }
    }
  })

  incomplete = "courses.datintro22.T"
  assert "courses.datintro22.TAs" in complete_path(incomplete)
  assert "courses.datintro22.url" not in complete_path(incomplete)
@

\subsection{Printing the config}

That [[print_config]] function should print the remaining levels of the config 
tree.
And we want it to print on the format of
[[courses.datintro22.url = https://...]].
This function will do a depth-first traversal through the config to print all 
values.
<<helper functions>>=
def print_config(conf, path=""):
  """
  Prints the config tree contained in `conf` to stdout.
  Optional `path` is prepended.
  """
  try:
    for key in conf.keys():
      if path:
        print_config(conf[key], f"{path}.{key}")
      else:
        print_config(conf[key], key)
  except AttributeError:
    print(f"{path} = {conf}")
@
